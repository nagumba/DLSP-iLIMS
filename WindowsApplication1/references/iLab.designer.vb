'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="eLab")>  _
Partial Public Class iLabDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertArchiving(instance As Archiving)
    End Sub
  Partial Private Sub UpdateArchiving(instance As Archiving)
    End Sub
  Partial Private Sub DeleteArchiving(instance As Archiving)
    End Sub
  Partial Private Sub InsertBatch_Detail(instance As Batch_Detail)
    End Sub
  Partial Private Sub UpdateBatch_Detail(instance As Batch_Detail)
    End Sub
  Partial Private Sub DeleteBatch_Detail(instance As Batch_Detail)
    End Sub
  Partial Private Sub InsertLabqueue_manager(instance As Labqueue_manager)
    End Sub
  Partial Private Sub UpdateLabqueue_manager(instance As Labqueue_manager)
    End Sub
  Partial Private Sub DeleteLabqueue_manager(instance As Labqueue_manager)
    End Sub
  Partial Private Sub InsertLocation(instance As Location)
    End Sub
  Partial Private Sub UpdateLocation(instance As Location)
    End Sub
  Partial Private Sub DeleteLocation(instance As Location)
    End Sub
  Partial Private Sub Insertright(instance As right)
    End Sub
  Partial Private Sub Updateright(instance As right)
    End Sub
  Partial Private Sub Deleteright(instance As right)
    End Sub
  Partial Private Sub Insertuser(instance As user)
    End Sub
  Partial Private Sub Updateuser(instance As user)
    End Sub
  Partial Private Sub Deleteuser(instance As user)
    End Sub
  Partial Private Sub InsertSample_Result(instance As Sample_Result)
    End Sub
  Partial Private Sub UpdateSample_Result(instance As Sample_Result)
    End Sub
  Partial Private Sub DeleteSample_Result(instance As Sample_Result)
    End Sub
  Partial Private Sub InsertSample_log(instance As Sample_log)
    End Sub
  Partial Private Sub UpdateSample_log(instance As Sample_log)
    End Sub
  Partial Private Sub DeleteSample_log(instance As Sample_log)
    End Sub
  Partial Private Sub InsertDemographic(instance As Demographic)
    End Sub
  Partial Private Sub UpdateDemographic(instance As Demographic)
    End Sub
  Partial Private Sub DeleteDemographic(instance As Demographic)
    End Sub
  Partial Private Sub InsertArchiving1(instance As Archiving1)
    End Sub
  Partial Private Sub UpdateArchiving1(instance As Archiving1)
    End Sub
  Partial Private Sub DeleteArchiving1(instance As Archiving1)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.ilims.My.MySettings.Default.eLabConnectionString1, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Archivings() As System.Data.Linq.Table(Of Archiving)
		Get
			Return Me.GetTable(Of Archiving)
		End Get
	End Property
	
	Public ReadOnly Property Batch_Details() As System.Data.Linq.Table(Of Batch_Detail)
		Get
			Return Me.GetTable(Of Batch_Detail)
		End Get
	End Property
	
	Public ReadOnly Property Labqueue_managers() As System.Data.Linq.Table(Of Labqueue_manager)
		Get
			Return Me.GetTable(Of Labqueue_manager)
		End Get
	End Property
	
	Public ReadOnly Property Locations() As System.Data.Linq.Table(Of Location)
		Get
			Return Me.GetTable(Of Location)
		End Get
	End Property
	
	Public ReadOnly Property rights() As System.Data.Linq.Table(Of right)
		Get
			Return Me.GetTable(Of right)
		End Get
	End Property
	
	Public ReadOnly Property users() As System.Data.Linq.Table(Of user)
		Get
			Return Me.GetTable(Of user)
		End Get
	End Property
	
	Public ReadOnly Property Sample_Results() As System.Data.Linq.Table(Of Sample_Result)
		Get
			Return Me.GetTable(Of Sample_Result)
		End Get
	End Property
	
	Public ReadOnly Property Sample_logs() As System.Data.Linq.Table(Of Sample_log)
		Get
			Return Me.GetTable(Of Sample_log)
		End Get
	End Property
	
	Public ReadOnly Property Demographics() As System.Data.Linq.Table(Of Demographic)
		Get
			Return Me.GetTable(Of Demographic)
		End Get
	End Property
	
	Public ReadOnly Property Archiving1s() As System.Data.Linq.Table(Of Archiving1)
		Get
			Return Me.GetTable(Of Archiving1)
		End Get
	End Property
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="settings.manageUsers")>  _
	Public Function manageUsers(<Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal userID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal groupID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal fname As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal onames As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(2)")> ByVal code As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal username As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(50)")> ByVal password As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal logged As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(100)")> ByVal email As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="date", DbType:="DateTime")> ByVal [date] As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(3)")> ByVal status As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(15)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal type As System.Nullable(Of Byte)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), userID, groupID, fname, onames, code, username, password, logged, email, [date], status, officer, type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="settings.JobQueueupdateManager", IsComposable:=true)>  _
	Public Function JobQueueupdateManager(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Visit_ID", DbType:="Int")> ByVal visit_ID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(20)")> ByVal tblFld As String) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), visit_ID, tblFld).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="settings.GetUsers")>  _
	Public Function GetUsers() As ISingleResult(Of GetUsersResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of GetUsersResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="settings.DeletePatientRecord", IsComposable:=true)>  _
	Public Function DeletePatientRecord(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Visit_ID", DbType:="Int")> ByVal visit_ID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal tblFld As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="VarChar(100)")> ByVal schema As String) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), visit_ID, tblFld, schema).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_archives")>  _
	Public Function manage_archives(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LabRef", DbType:="Int")> ByVal labRef As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Barcode", DbType:="NVarChar(30)")> ByVal barcode As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UniqueID", DbType:="NVarChar(30)")> ByVal uniqueID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BoxID", DbType:="Int")> ByVal boxID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pos_Ref", DbType:="Int")> ByVal pos_Ref As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ArchiveState", DbType:="NVarChar(20)")> ByVal archiveState As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ArchiveDate", DbType:="DateTime")> ByVal archiveDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Officer", DbType:="NVarChar(20)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal type As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), labRef, barcode, uniqueID, boxID, pos_Ref, archiveState, archiveDate, officer, type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_Freezers")>  _
	Public Function manage_Freezers(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FR_No", DbType:="Int")> ByVal fR_No As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FR_Location", DbType:="NVarChar(20)")> ByVal fR_Location As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FR_Name", DbType:="NVarChar(20)")> ByVal fR_Name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FR_InstallDate", DbType:="DateTime")> ByVal fR_InstallDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FR_Shelves", DbType:="Int")> ByVal fR_Shelves As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FR_Racks", DbType:="Int")> ByVal fR_Racks As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="FR_Desc", DbType:="NVarChar(200)")> ByVal fR_Desc As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Officer", DbType:="NVarChar(20)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal type As System.Nullable(Of Byte)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), fR_No, fR_Location, fR_Name, fR_InstallDate, fR_Shelves, fR_Racks, fR_Desc, officer, type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_Locations", IsComposable:=true)>  _
	Public Function manage_Locations(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Country", DbType:="NVarChar(100)")> ByVal country As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="County", DbType:="NVarChar(100)")> ByVal county As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LocationID", DbType:="Int")> ByVal locationID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Facility", DbType:="NVarChar(100)")> ByVal facility As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Officer", DbType:="NVarChar(40)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal type As System.Nullable(Of Byte)) As Object
		Return CType(Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), country, county, locationID, facility, officer, type).ReturnValue,Object)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_Specimen")>  _
	Public Function manage_Specimen(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SpecimenID", DbType:="VarChar(20)")> ByVal specimenID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(20)")> ByVal location As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(20)")> ByVal sample_type As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(20)")> ByVal sample_group As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal coll_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal receive_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Date")> ByVal entry_date As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(20)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal type As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), specimenID, location, sample_type, sample_group, coll_date, receive_date, entry_date, officer, type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_Demographics")>  _
	Public Function manage_Demographics(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Name", DbType:="NVarChar(30)")> ByVal name As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="MName", DbType:="NVarChar(30)")> ByVal mName As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Lname", DbType:="NVarChar(30)")> ByVal lname As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Age", DbType:="Int")> ByVal age As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Gender", DbType:="NVarChar(6)")> ByVal gender As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LabRef", DbType:="Int")> ByVal labRef As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Barcode", DbType:="VarChar(20)")> ByVal barcode As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Officer", DbType:="NVarChar(20)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="TinyInt")> ByVal type As System.Nullable(Of Byte)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), name, mName, lname, age, gender, labRef, barcode, officer, type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.Proc_select_Results")>  _
	Public Function Proc_select_Results() As ISingleResult(Of Proc_select_ResultsResult)
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo))
		Return CType(result.ReturnValue,ISingleResult(Of Proc_select_ResultsResult))
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_testing")>  _
	Public Function manage_testing(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TestDate", DbType:="Date")> ByVal testDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LabRef", DbType:="Int")> ByVal labRef As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Barcode", DbType:="NVarChar(30)")> ByVal barcode As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UniqueID", DbType:="NVarChar(30)")> ByVal uniqueID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(100)")> ByVal testStatus As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TestDone", DbType:="NVarChar(100)")> ByVal testDone As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="NotestReason", DbType:="NVarChar(100)")> ByVal notestReason As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="TestOutCome", DbType:="NVarChar(100)")> ByVal testOutCome As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Officer", DbType:="NVarChar(20)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal type As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), testDate, labRef, barcode, uniqueID, testStatus, testDone, notestReason, testOutCome, officer, type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_OD_CTvalues")>  _
	Public Function manage_OD_CTvalues(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Lab_Ref", DbType:="NChar(10)")> ByVal lab_Ref As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Barcode", DbType:="NChar(10)")> ByVal barcode As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OD_CT", DbType:="NChar(10)")> ByVal oD_CT As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="OD_CT_Value", DbType:="Decimal(18,2)")> ByVal oD_CT_Value As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Mean", DbType:="Decimal(18,2)")> ByVal mean As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Cut_off", DbType:="Decimal(18,2)")> ByVal cut_off As System.Nullable(Of Decimal), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Officer", DbType:="NChar(10)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal type As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), lab_Ref, barcode, oD_CT, oD_CT_Value, mean, cut_off, officer, type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_Sample_Results")>  _
	Public Function manage_Sample_Results(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LabRef", DbType:="Int")> ByVal labRef As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Barcode", DbType:="NVarChar(20)")> ByVal barcode As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UniqueID", DbType:="NVarChar(20)")> ByVal uniqueID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Test", DbType:="NVarChar(50)")> ByVal test As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Kit", DbType:="NChar(100)")> ByVal kit As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Target", DbType:="NChar(100)")> ByVal target As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Result", DbType:="NVarChar(50)")> ByVal result As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QC_Officer", DbType:="NChar(30)")> ByVal qC_Officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="QCdate", DbType:="Date")> ByVal qCdate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Officer", DbType:="NVarChar(20)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Measure", DbType:="Float")> ByVal measure As System.Nullable(Of Double), <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NChar(20)")> ByVal status As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal type As System.Nullable(Of Integer)) As Integer
		Dim result1 As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), labRef, barcode, uniqueID, test, kit, target, result, qC_Officer, qCdate, officer, measure, status, type)
		Return CType(result1.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_aliquots")>  _
	Public Function manage_aliquots(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LabRef", DbType:="Int")> ByVal labRef As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Barcode", DbType:="NVarChar(30)")> ByVal barcode As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UniqueID", DbType:="NVarChar(30)")> ByVal uniqueID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="BoxID", DbType:="Int")> ByVal boxID As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Pos_Ref", DbType:="Int")> ByVal pos_Ref As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AliquotState", DbType:="NVarChar(20)")> ByVal aliquotState As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="AliquotVol", DbType:="NVarChar(20)")> ByVal aliquotVol As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Officer", DbType:="NVarChar(20)")> ByVal officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal type As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), labRef, barcode, uniqueID, boxID, pos_Ref, aliquotState, aliquotVol, officer, type)
		Return CType(result.ReturnValue,Integer)
	End Function
	
	<Global.System.Data.Linq.Mapping.FunctionAttribute(Name:="dbo.manage_Shipping")>  _
	Public Function manage_Shipping(<Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="LabRef", DbType:="Int")> ByVal labRef As System.Nullable(Of Integer), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Barcode", DbType:="NVarChar(30)")> ByVal barcode As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="UniqueID", DbType:="NVarChar(30)")> ByVal uniqueID As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Source", DbType:="NVarChar(30)")> ByVal source As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Destination", DbType:="NVarChar(30)")> ByVal destination As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="SendDate", DbType:="Date")> ByVal sendDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="ReceiveDate", DbType:="Date")> ByVal receiveDate As System.Nullable(Of Date), <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Addressee", DbType:="NVarChar(20)")> ByVal addressee As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Receive_officer", DbType:="NVarChar(20)")> ByVal receive_officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(Name:="Send_officer", DbType:="NVarChar(20)")> ByVal send_officer As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(20)")> ByVal _return As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="NVarChar(20)")> ByVal _returnED As String, <Global.System.Data.Linq.Mapping.ParameterAttribute(DbType:="Int")> ByVal type As System.Nullable(Of Integer)) As Integer
		Dim result As IExecuteResult = Me.ExecuteMethodCall(Me, CType(MethodInfo.GetCurrentMethod,MethodInfo), labRef, barcode, uniqueID, source, destination, sendDate, receiveDate, addressee, receive_officer, send_officer, _return, _returnED, type)
		Return CType(result.ReturnValue,Integer)
	End Function
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Archivings")>  _
Partial Public Class Archiving
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LabRef As Integer
	
	Private _Barcode As System.Nullable(Of Integer)
	
	Private _UniqueID As String
	
	Private _FREEZER As String
	
	Private _SHELF As String
	
	Private _RACK As String
	
	Private _ROW As String
	
	Private _COLUMN As String
	
	Private _Pos_Ref As String
	
	Private _ArchiveState As String
	
	Private _ArchiveDate As String
	
	Private _Officer As String
	
	Private _Rec_Date As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLabRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnLabRefChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnFREEZERChanging(value As String)
    End Sub
    Partial Private Sub OnFREEZERChanged()
    End Sub
    Partial Private Sub OnSHELFChanging(value As String)
    End Sub
    Partial Private Sub OnSHELFChanged()
    End Sub
    Partial Private Sub OnRACKChanging(value As String)
    End Sub
    Partial Private Sub OnRACKChanged()
    End Sub
    Partial Private Sub OnROWChanging(value As String)
    End Sub
    Partial Private Sub OnROWChanged()
    End Sub
    Partial Private Sub OnCOLUMNChanging(value As String)
    End Sub
    Partial Private Sub OnCOLUMNChanged()
    End Sub
    Partial Private Sub OnPos_RefChanging(value As String)
    End Sub
    Partial Private Sub OnPos_RefChanged()
    End Sub
    Partial Private Sub OnArchiveStateChanging(value As String)
    End Sub
    Partial Private Sub OnArchiveStateChanged()
    End Sub
    Partial Private Sub OnArchiveDateChanging(value As String)
    End Sub
    Partial Private Sub OnArchiveDateChanged()
    End Sub
    Partial Private Sub OnOfficerChanging(value As String)
    End Sub
    Partial Private Sub OnOfficerChanged()
    End Sub
    Partial Private Sub OnRec_DateChanging(value As String)
    End Sub
    Partial Private Sub OnRec_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LabRef", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LabRef() As Integer
		Get
			Return Me._LabRef
		End Get
		Set
			If ((Me._LabRef = value)  _
						= false) Then
				Me.OnLabRefChanging(value)
				Me.SendPropertyChanging
				Me._LabRef = value
				Me.SendPropertyChanged("LabRef")
				Me.OnLabRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="Int")>  _
	Public Property Barcode() As System.Nullable(Of Integer)
		Get
			Return Me._Barcode
		End Get
		Set
			If (Me._Barcode.Equals(value) = false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UniqueID() As String
		Get
			Return Me._UniqueID
		End Get
		Set
			If (String.Equals(Me._UniqueID, value) = false) Then
				Me.OnUniqueIDChanging(value)
				Me.SendPropertyChanging
				Me._UniqueID = value
				Me.SendPropertyChanged("UniqueID")
				Me.OnUniqueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FREEZER", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property FREEZER() As String
		Get
			Return Me._FREEZER
		End Get
		Set
			If (String.Equals(Me._FREEZER, value) = false) Then
				Me.OnFREEZERChanging(value)
				Me.SendPropertyChanging
				Me._FREEZER = value
				Me.SendPropertyChanged("FREEZER")
				Me.OnFREEZERChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SHELF", DbType:="NVarChar(255)")>  _
	Public Property SHELF() As String
		Get
			Return Me._SHELF
		End Get
		Set
			If (String.Equals(Me._SHELF, value) = false) Then
				Me.OnSHELFChanging(value)
				Me.SendPropertyChanging
				Me._SHELF = value
				Me.SendPropertyChanged("SHELF")
				Me.OnSHELFChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RACK", DbType:="NVarChar(255)")>  _
	Public Property RACK() As String
		Get
			Return Me._RACK
		End Get
		Set
			If (String.Equals(Me._RACK, value) = false) Then
				Me.OnRACKChanging(value)
				Me.SendPropertyChanging
				Me._RACK = value
				Me.SendPropertyChanged("RACK")
				Me.OnRACKChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ROW", DbType:="NVarChar(255)")>  _
	Public Property ROW() As String
		Get
			Return Me._ROW
		End Get
		Set
			If (String.Equals(Me._ROW, value) = false) Then
				Me.OnROWChanging(value)
				Me.SendPropertyChanging
				Me._ROW = value
				Me.SendPropertyChanged("ROW")
				Me.OnROWChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="[COLUMN]", Storage:="_COLUMN", DbType:="NVarChar(255)")>  _
	Public Property COLUMN() As String
		Get
			Return Me._COLUMN
		End Get
		Set
			If (String.Equals(Me._COLUMN, value) = false) Then
				Me.OnCOLUMNChanging(value)
				Me.SendPropertyChanging
				Me._COLUMN = value
				Me.SendPropertyChanged("COLUMN")
				Me.OnCOLUMNChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pos_Ref", DbType:="NVarChar(10)")>  _
	Public Property Pos_Ref() As String
		Get
			Return Me._Pos_Ref
		End Get
		Set
			If (String.Equals(Me._Pos_Ref, value) = false) Then
				Me.OnPos_RefChanging(value)
				Me.SendPropertyChanging
				Me._Pos_Ref = value
				Me.SendPropertyChanged("Pos_Ref")
				Me.OnPos_RefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArchiveState", DbType:="NVarChar(10)")>  _
	Public Property ArchiveState() As String
		Get
			Return Me._ArchiveState
		End Get
		Set
			If (String.Equals(Me._ArchiveState, value) = false) Then
				Me.OnArchiveStateChanging(value)
				Me.SendPropertyChanging
				Me._ArchiveState = value
				Me.SendPropertyChanged("ArchiveState")
				Me.OnArchiveStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArchiveDate", DbType:="NVarChar(10)")>  _
	Public Property ArchiveDate() As String
		Get
			Return Me._ArchiveDate
		End Get
		Set
			If (String.Equals(Me._ArchiveDate, value) = false) Then
				Me.OnArchiveDateChanging(value)
				Me.SendPropertyChanging
				Me._ArchiveDate = value
				Me.SendPropertyChanged("ArchiveDate")
				Me.OnArchiveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Officer", DbType:="NVarChar(10)")>  _
	Public Property Officer() As String
		Get
			Return Me._Officer
		End Get
		Set
			If (String.Equals(Me._Officer, value) = false) Then
				Me.OnOfficerChanging(value)
				Me.SendPropertyChanging
				Me._Officer = value
				Me.SendPropertyChanged("Officer")
				Me.OnOfficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rec_Date", DbType:="NVarChar(10)")>  _
	Public Property Rec_Date() As String
		Get
			Return Me._Rec_Date
		End Get
		Set
			If (String.Equals(Me._Rec_Date, value) = false) Then
				Me.OnRec_DateChanging(value)
				Me.SendPropertyChanging
				Me._Rec_Date = value
				Me.SendPropertyChanged("Rec_Date")
				Me.OnRec_DateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Batch_Details")>  _
Partial Public Class Batch_Detail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RecID As System.Nullable(Of System.Guid)
	
	Private _BatchID As String
	
	Private _BatchOrigin As String
	
	Private _SampleType As String
	
	Private _SampleCount As System.Nullable(Of Integer)
	
	Private _Officer As String
	
	Private _Recdate As String
	
	Private _Labqueue_managers As EntitySet(Of Labqueue_manager)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRecIDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnRecIDChanged()
    End Sub
    Partial Private Sub OnBatchIDChanging(value As String)
    End Sub
    Partial Private Sub OnBatchIDChanged()
    End Sub
    Partial Private Sub OnBatchOriginChanging(value As String)
    End Sub
    Partial Private Sub OnBatchOriginChanged()
    End Sub
    Partial Private Sub OnSampleTypeChanging(value As String)
    End Sub
    Partial Private Sub OnSampleTypeChanged()
    End Sub
    Partial Private Sub OnSampleCountChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnSampleCountChanged()
    End Sub
    Partial Private Sub OnOfficerChanging(value As String)
    End Sub
    Partial Private Sub OnOfficerChanged()
    End Sub
    Partial Private Sub OnRecdateChanging(value As String)
    End Sub
    Partial Private Sub OnRecdateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Labqueue_managers = New EntitySet(Of Labqueue_manager)(AddressOf Me.attach_Labqueue_managers, AddressOf Me.detach_Labqueue_managers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecID", DbType:="UniqueIdentifier")>  _
	Public Property RecID() As System.Nullable(Of System.Guid)
		Get
			Return Me._RecID
		End Get
		Set
			If (Me._RecID.Equals(value) = false) Then
				Me.OnRecIDChanging(value)
				Me.SendPropertyChanging
				Me._RecID = value
				Me.SendPropertyChanged("RecID")
				Me.OnRecIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BatchID() As String
		Get
			Return Me._BatchID
		End Get
		Set
			If (String.Equals(Me._BatchID, value) = false) Then
				Me.OnBatchIDChanging(value)
				Me.SendPropertyChanging
				Me._BatchID = value
				Me.SendPropertyChanged("BatchID")
				Me.OnBatchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchOrigin", DbType:="NVarChar(100)")>  _
	Public Property BatchOrigin() As String
		Get
			Return Me._BatchOrigin
		End Get
		Set
			If (String.Equals(Me._BatchOrigin, value) = false) Then
				Me.OnBatchOriginChanging(value)
				Me.SendPropertyChanging
				Me._BatchOrigin = value
				Me.SendPropertyChanged("BatchOrigin")
				Me.OnBatchOriginChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SampleType", DbType:="NVarChar(50)")>  _
	Public Property SampleType() As String
		Get
			Return Me._SampleType
		End Get
		Set
			If (String.Equals(Me._SampleType, value) = false) Then
				Me.OnSampleTypeChanging(value)
				Me.SendPropertyChanging
				Me._SampleType = value
				Me.SendPropertyChanged("SampleType")
				Me.OnSampleTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SampleCount", DbType:="Int")>  _
	Public Property SampleCount() As System.Nullable(Of Integer)
		Get
			Return Me._SampleCount
		End Get
		Set
			If (Me._SampleCount.Equals(value) = false) Then
				Me.OnSampleCountChanging(value)
				Me.SendPropertyChanging
				Me._SampleCount = value
				Me.SendPropertyChanged("SampleCount")
				Me.OnSampleCountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Officer", DbType:="NVarChar(10)")>  _
	Public Property Officer() As String
		Get
			Return Me._Officer
		End Get
		Set
			If (String.Equals(Me._Officer, value) = false) Then
				Me.OnOfficerChanging(value)
				Me.SendPropertyChanging
				Me._Officer = value
				Me.SendPropertyChanged("Officer")
				Me.OnOfficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Recdate", DbType:="NVarChar(10)")>  _
	Public Property Recdate() As String
		Get
			Return Me._Recdate
		End Get
		Set
			If (String.Equals(Me._Recdate, value) = false) Then
				Me.OnRecdateChanging(value)
				Me.SendPropertyChanging
				Me._Recdate = value
				Me.SendPropertyChanged("Recdate")
				Me.OnRecdateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Batch_Detail_Labqueue_manager", Storage:="_Labqueue_managers", ThisKey:="BatchID", OtherKey:="BatchID")>  _
	Public Property Labqueue_managers() As EntitySet(Of Labqueue_manager)
		Get
			Return Me._Labqueue_managers
		End Get
		Set
			Me._Labqueue_managers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Labqueue_managers(ByVal entity As Labqueue_manager)
		Me.SendPropertyChanging
		entity.Batch_Detail = Me
	End Sub
	
	Private Sub detach_Labqueue_managers(ByVal entity As Labqueue_manager)
		Me.SendPropertyChanging
		entity.Batch_Detail = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Labqueue_manager")>  _
Partial Public Class Labqueue_manager
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LabRef As Integer
	
	Private _Barcode As Integer
	
	Private _LocationID As Integer
	
	Private _BatchID As String
	
	Private _StudyID As String
	
	Private _Received As String
	
	Private _SampleR As String
	
	Private _demographics As String
	
	Private _Archived As String
	
	Private _Aliqoted As String
	
	Private _Rec_Date As Date
	
	Private _officer As String
	
	Private _Batch_Detail As EntityRef(Of Batch_Detail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLabRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnLabRefChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnLocationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLocationIDChanged()
    End Sub
    Partial Private Sub OnBatchIDChanging(value As String)
    End Sub
    Partial Private Sub OnBatchIDChanged()
    End Sub
    Partial Private Sub OnStudyIDChanging(value As String)
    End Sub
    Partial Private Sub OnStudyIDChanged()
    End Sub
    Partial Private Sub OnReceivedChanging(value As String)
    End Sub
    Partial Private Sub OnReceivedChanged()
    End Sub
    Partial Private Sub OnSampleRChanging(value As String)
    End Sub
    Partial Private Sub OnSampleRChanged()
    End Sub
    Partial Private Sub OndemographicsChanging(value As String)
    End Sub
    Partial Private Sub OndemographicsChanged()
    End Sub
    Partial Private Sub OnArchivedChanging(value As String)
    End Sub
    Partial Private Sub OnArchivedChanged()
    End Sub
    Partial Private Sub OnAliqotedChanging(value As String)
    End Sub
    Partial Private Sub OnAliqotedChanged()
    End Sub
    Partial Private Sub OnRec_DateChanging(value As Date)
    End Sub
    Partial Private Sub OnRec_DateChanged()
    End Sub
    Partial Private Sub OnofficerChanging(value As String)
    End Sub
    Partial Private Sub OnofficerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Batch_Detail = CType(Nothing, EntityRef(Of Batch_Detail))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LabRef", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LabRef() As Integer
		Get
			Return Me._LabRef
		End Get
		Set
			If ((Me._LabRef = value)  _
						= false) Then
				Me.OnLabRefChanging(value)
				Me.SendPropertyChanging
				Me._LabRef = value
				Me.SendPropertyChanged("LabRef")
				Me.OnLabRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Barcode() As Integer
		Get
			Return Me._Barcode
		End Get
		Set
			If ((Me._Barcode = value)  _
						= false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LocationID() As Integer
		Get
			Return Me._LocationID
		End Get
		Set
			If ((Me._LocationID = value)  _
						= false) Then
				Me.OnLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationID = value
				Me.SendPropertyChanged("LocationID")
				Me.OnLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchID", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BatchID() As String
		Get
			Return Me._BatchID
		End Get
		Set
			If (String.Equals(Me._BatchID, value) = false) Then
				If Me._Batch_Detail.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnBatchIDChanging(value)
				Me.SendPropertyChanging
				Me._BatchID = value
				Me.SendPropertyChanged("BatchID")
				Me.OnBatchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudyID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property StudyID() As String
		Get
			Return Me._StudyID
		End Get
		Set
			If (String.Equals(Me._StudyID, value) = false) Then
				Me.OnStudyIDChanging(value)
				Me.SendPropertyChanging
				Me._StudyID = value
				Me.SendPropertyChanged("StudyID")
				Me.OnStudyIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Received", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Received() As String
		Get
			Return Me._Received
		End Get
		Set
			If (String.Equals(Me._Received, value) = false) Then
				Me.OnReceivedChanging(value)
				Me.SendPropertyChanging
				Me._Received = value
				Me.SendPropertyChanged("Received")
				Me.OnReceivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SampleR", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property SampleR() As String
		Get
			Return Me._SampleR
		End Get
		Set
			If (String.Equals(Me._SampleR, value) = false) Then
				Me.OnSampleRChanging(value)
				Me.SendPropertyChanging
				Me._SampleR = value
				Me.SendPropertyChanged("SampleR")
				Me.OnSampleRChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_demographics", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property demographics() As String
		Get
			Return Me._demographics
		End Get
		Set
			If (String.Equals(Me._demographics, value) = false) Then
				Me.OndemographicsChanging(value)
				Me.SendPropertyChanging
				Me._demographics = value
				Me.SendPropertyChanged("demographics")
				Me.OndemographicsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Archived", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Archived() As String
		Get
			Return Me._Archived
		End Get
		Set
			If (String.Equals(Me._Archived, value) = false) Then
				Me.OnArchivedChanging(value)
				Me.SendPropertyChanging
				Me._Archived = value
				Me.SendPropertyChanged("Archived")
				Me.OnArchivedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aliqoted", DbType:="NVarChar(5) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Aliqoted() As String
		Get
			Return Me._Aliqoted
		End Get
		Set
			If (String.Equals(Me._Aliqoted, value) = false) Then
				Me.OnAliqotedChanging(value)
				Me.SendPropertyChanging
				Me._Aliqoted = value
				Me.SendPropertyChanged("Aliqoted")
				Me.OnAliqotedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rec_Date", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Rec_Date() As Date
		Get
			Return Me._Rec_Date
		End Get
		Set
			If ((Me._Rec_Date = value)  _
						= false) Then
				Me.OnRec_DateChanging(value)
				Me.SendPropertyChanging
				Me._Rec_Date = value
				Me.SendPropertyChanged("Rec_Date")
				Me.OnRec_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_officer", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property officer() As String
		Get
			Return Me._officer
		End Get
		Set
			If (String.Equals(Me._officer, value) = false) Then
				Me.OnofficerChanging(value)
				Me.SendPropertyChanging
				Me._officer = value
				Me.SendPropertyChanged("officer")
				Me.OnofficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Batch_Detail_Labqueue_manager", Storage:="_Batch_Detail", ThisKey:="BatchID", OtherKey:="BatchID", IsForeignKey:=true)>  _
	Public Property Batch_Detail() As Batch_Detail
		Get
			Return Me._Batch_Detail.Entity
		End Get
		Set
			Dim previousValue As Batch_Detail = Me._Batch_Detail.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Batch_Detail.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Batch_Detail.Entity = Nothing
					previousValue.Labqueue_managers.Remove(Me)
				End If
				Me._Batch_Detail.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Labqueue_managers.Add(Me)
					Me._BatchID = value.BatchID
				Else
					Me._BatchID = CType(Nothing, String)
				End If
				Me.SendPropertyChanged("Batch_Detail")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Locations")>  _
Partial Public Class Location
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _REC_ID As System.Nullable(Of System.Guid)
	
	Private _Country As String
	
	Private _County As String
	
	Private _LocationID As Integer
	
	Private _Facility As String
	
	Private _Officer As String
	
	Private _Rec_Date As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnREC_IDChanging(value As System.Nullable(Of System.Guid))
    End Sub
    Partial Private Sub OnREC_IDChanged()
    End Sub
    Partial Private Sub OnCountryChanging(value As String)
    End Sub
    Partial Private Sub OnCountryChanged()
    End Sub
    Partial Private Sub OnCountyChanging(value As String)
    End Sub
    Partial Private Sub OnCountyChanged()
    End Sub
    Partial Private Sub OnLocationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnLocationIDChanged()
    End Sub
    Partial Private Sub OnFacilityChanging(value As String)
    End Sub
    Partial Private Sub OnFacilityChanged()
    End Sub
    Partial Private Sub OnOfficerChanging(value As String)
    End Sub
    Partial Private Sub OnOfficerChanged()
    End Sub
    Partial Private Sub OnRec_DateChanging(value As String)
    End Sub
    Partial Private Sub OnRec_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REC_ID", DbType:="UniqueIdentifier")>  _
	Public Property REC_ID() As System.Nullable(Of System.Guid)
		Get
			Return Me._REC_ID
		End Get
		Set
			If (Me._REC_ID.Equals(value) = false) Then
				Me.OnREC_IDChanging(value)
				Me.SendPropertyChanging
				Me._REC_ID = value
				Me.SendPropertyChanged("REC_ID")
				Me.OnREC_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Country", DbType:="NVarChar(50)")>  _
	Public Property Country() As String
		Get
			Return Me._Country
		End Get
		Set
			If (String.Equals(Me._Country, value) = false) Then
				Me.OnCountryChanging(value)
				Me.SendPropertyChanging
				Me._Country = value
				Me.SendPropertyChanged("Country")
				Me.OnCountryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_County", DbType:="NVarChar(50)")>  _
	Public Property County() As String
		Get
			Return Me._County
		End Get
		Set
			If (String.Equals(Me._County, value) = false) Then
				Me.OnCountyChanging(value)
				Me.SendPropertyChanging
				Me._County = value
				Me.SendPropertyChanged("County")
				Me.OnCountyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LocationID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LocationID() As Integer
		Get
			Return Me._LocationID
		End Get
		Set
			If ((Me._LocationID = value)  _
						= false) Then
				Me.OnLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._LocationID = value
				Me.SendPropertyChanged("LocationID")
				Me.OnLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Facility", DbType:="NVarChar(50)")>  _
	Public Property Facility() As String
		Get
			Return Me._Facility
		End Get
		Set
			If (String.Equals(Me._Facility, value) = false) Then
				Me.OnFacilityChanging(value)
				Me.SendPropertyChanging
				Me._Facility = value
				Me.SendPropertyChanged("Facility")
				Me.OnFacilityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Officer", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Officer() As String
		Get
			Return Me._Officer
		End Get
		Set
			If (String.Equals(Me._Officer, value) = false) Then
				Me.OnOfficerChanging(value)
				Me.SendPropertyChanging
				Me._Officer = value
				Me.SendPropertyChanged("Officer")
				Me.OnOfficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rec_Date", DbType:="NVarChar(10)")>  _
	Public Property Rec_Date() As String
		Get
			Return Me._Rec_Date
		End Get
		Set
			If (String.Equals(Me._Rec_Date, value) = false) Then
				Me.OnRec_DateChanging(value)
				Me.SendPropertyChanging
				Me._Rec_Date = value
				Me.SendPropertyChanged("Rec_Date")
				Me.OnRec_DateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.rights")>  _
Partial Public Class right
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _accessID As Integer
	
	Private _groupID As Integer
	
	Private _modID As Integer
	
	Private _access As String
	
	Private _date As Date
	
	Private _status As String
	
	Private _officer As String
	
	Private _users As EntitySet(Of user)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnaccessIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnaccessIDChanged()
    End Sub
    Partial Private Sub OngroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OngroupIDChanged()
    End Sub
    Partial Private Sub OnmodIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnmodIDChanged()
    End Sub
    Partial Private Sub OnaccessChanging(value As String)
    End Sub
    Partial Private Sub OnaccessChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnofficerChanging(value As String)
    End Sub
    Partial Private Sub OnofficerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._users = New EntitySet(Of user)(AddressOf Me.attach_users, AddressOf Me.detach_users)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_accessID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property accessID() As Integer
		Get
			Return Me._accessID
		End Get
		Set
			If ((Me._accessID = value)  _
						= false) Then
				Me.OnaccessIDChanging(value)
				Me.SendPropertyChanging
				Me._accessID = value
				Me.SendPropertyChanged("accessID")
				Me.OnaccessIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property groupID() As Integer
		Get
			Return Me._groupID
		End Get
		Set
			If ((Me._groupID = value)  _
						= false) Then
				Me.OngroupIDChanging(value)
				Me.SendPropertyChanging
				Me._groupID = value
				Me.SendPropertyChanged("groupID")
				Me.OngroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_modID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property modID() As Integer
		Get
			Return Me._modID
		End Get
		Set
			If ((Me._modID = value)  _
						= false) Then
				Me.OnmodIDChanging(value)
				Me.SendPropertyChanging
				Me._modID = value
				Me.SendPropertyChanged("modID")
				Me.OnmodIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_access", DbType:="VarChar(3) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property access() As String
		Get
			Return Me._access
		End Get
		Set
			If (String.Equals(Me._access, value) = false) Then
				Me.OnaccessChanging(value)
				Me.SendPropertyChanging
				Me._access = value
				Me.SendPropertyChanged("access")
				Me.OnaccessChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="DateTime NOT NULL", IsPrimaryKey:=true)>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(3) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_officer", DbType:="VarChar(15) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property officer() As String
		Get
			Return Me._officer
		End Get
		Set
			If (String.Equals(Me._officer, value) = false) Then
				Me.OnofficerChanging(value)
				Me.SendPropertyChanging
				Me._officer = value
				Me.SendPropertyChanged("officer")
				Me.OnofficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="right_user", Storage:="_users", ThisKey:="groupID", OtherKey:="groupID")>  _
	Public Property users() As EntitySet(Of user)
		Get
			Return Me._users
		End Get
		Set
			Me._users.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_users(ByVal entity As user)
		Me.SendPropertyChanging
		entity.right = Me
	End Sub
	
	Private Sub detach_users(ByVal entity As user)
		Me.SendPropertyChanging
		entity.right = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.users")>  _
Partial Public Class user
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _userID As Integer
	
	Private _groupID As Integer
	
	Private _fname As String
	
	Private _onames As String
	
	Private _code As String
	
	Private _username As String
	
	Private _password As String
	
	Private _logged As Integer
	
	Private _email As String
	
	Private _date As Date
	
	Private _status As String
	
	Private _officer As String
	
	Private _right As EntityRef(Of right)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnuserIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnuserIDChanged()
    End Sub
    Partial Private Sub OngroupIDChanging(value As Integer)
    End Sub
    Partial Private Sub OngroupIDChanged()
    End Sub
    Partial Private Sub OnfnameChanging(value As String)
    End Sub
    Partial Private Sub OnfnameChanged()
    End Sub
    Partial Private Sub OnonamesChanging(value As String)
    End Sub
    Partial Private Sub OnonamesChanged()
    End Sub
    Partial Private Sub OncodeChanging(value As String)
    End Sub
    Partial Private Sub OncodeChanged()
    End Sub
    Partial Private Sub OnusernameChanging(value As String)
    End Sub
    Partial Private Sub OnusernameChanged()
    End Sub
    Partial Private Sub OnpasswordChanging(value As String)
    End Sub
    Partial Private Sub OnpasswordChanged()
    End Sub
    Partial Private Sub OnloggedChanging(value As Integer)
    End Sub
    Partial Private Sub OnloggedChanged()
    End Sub
    Partial Private Sub OnemailChanging(value As String)
    End Sub
    Partial Private Sub OnemailChanged()
    End Sub
    Partial Private Sub OndateChanging(value As Date)
    End Sub
    Partial Private Sub OndateChanged()
    End Sub
    Partial Private Sub OnstatusChanging(value As String)
    End Sub
    Partial Private Sub OnstatusChanged()
    End Sub
    Partial Private Sub OnofficerChanging(value As String)
    End Sub
    Partial Private Sub OnofficerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._right = CType(Nothing, EntityRef(Of right))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property userID() As Integer
		Get
			Return Me._userID
		End Get
		Set
			If ((Me._userID = value)  _
						= false) Then
				Me.OnuserIDChanging(value)
				Me.SendPropertyChanging
				Me._userID = value
				Me.SendPropertyChanged("userID")
				Me.OnuserIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupID", DbType:="Int NOT NULL")>  _
	Public Property groupID() As Integer
		Get
			Return Me._groupID
		End Get
		Set
			If ((Me._groupID = value)  _
						= false) Then
				If Me._right.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OngroupIDChanging(value)
				Me.SendPropertyChanging
				Me._groupID = value
				Me.SendPropertyChanged("groupID")
				Me.OngroupIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me.OnfnameChanging(value)
				Me.SendPropertyChanging
				Me._fname = value
				Me.SendPropertyChanged("fname")
				Me.OnfnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_onames", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property onames() As String
		Get
			Return Me._onames
		End Get
		Set
			If (String.Equals(Me._onames, value) = false) Then
				Me.OnonamesChanging(value)
				Me.SendPropertyChanging
				Me._onames = value
				Me.SendPropertyChanged("onames")
				Me.OnonamesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code", DbType:="VarChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me.OncodeChanging(value)
				Me.SendPropertyChanging
				Me._code = value
				Me.SendPropertyChanged("code")
				Me.OncodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me.OnusernameChanging(value)
				Me.SendPropertyChanging
				Me._username = value
				Me.SendPropertyChanged("username")
				Me.OnusernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me.OnpasswordChanging(value)
				Me.SendPropertyChanging
				Me._password = value
				Me.SendPropertyChanged("password")
				Me.OnpasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logged", DbType:="Int NOT NULL")>  _
	Public Property logged() As Integer
		Get
			Return Me._logged
		End Get
		Set
			If ((Me._logged = value)  _
						= false) Then
				Me.OnloggedChanging(value)
				Me.SendPropertyChanging
				Me._logged = value
				Me.SendPropertyChanged("logged")
				Me.OnloggedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me.OnemailChanging(value)
				Me.SendPropertyChanging
				Me._email = value
				Me.SendPropertyChanged("email")
				Me.OnemailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="DateTime NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me.OndateChanging(value)
				Me.SendPropertyChanging
				Me._date = value
				Me.SendPropertyChanged("[date]")
				Me.OndateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me.OnstatusChanging(value)
				Me.SendPropertyChanging
				Me._status = value
				Me.SendPropertyChanged("status")
				Me.OnstatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_officer", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property officer() As String
		Get
			Return Me._officer
		End Get
		Set
			If (String.Equals(Me._officer, value) = false) Then
				Me.OnofficerChanging(value)
				Me.SendPropertyChanging
				Me._officer = value
				Me.SendPropertyChanged("officer")
				Me.OnofficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="right_user", Storage:="_right", ThisKey:="groupID", OtherKey:="groupID", IsForeignKey:=true)>  _
	Public Property right() As right
		Get
			Return Me._right.Entity
		End Get
		Set
			Dim previousValue As right = Me._right.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._right.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._right.Entity = Nothing
					previousValue.users.Remove(Me)
				End If
				Me._right.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.users.Add(Me)
					Me._groupID = value.groupID
				Else
					Me._groupID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("right")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sample_Results")>  _
Partial Public Class Sample_Result
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ResultRef As Integer
	
	Private _REC_ID As System.Guid
	
	Private _Barcode As Integer
	
	Private _UniqueID As String
	
	Private _Aliqots As Integer
	
	Private _Test As String
	
	Private _Subtest As String
	
	Private _TestResult As String
	
	Private _TestedBy As String
	
	Private _QCby As String
	
	Private _Officer As String
	
	Private _Rec_Date As String
	
	Private _ODValue As System.Nullable(Of Double)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnResultRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnResultRefChanged()
    End Sub
    Partial Private Sub OnREC_IDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnREC_IDChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnAliqotsChanging(value As Integer)
    End Sub
    Partial Private Sub OnAliqotsChanged()
    End Sub
    Partial Private Sub OnTestChanging(value As String)
    End Sub
    Partial Private Sub OnTestChanged()
    End Sub
    Partial Private Sub OnSubtestChanging(value As String)
    End Sub
    Partial Private Sub OnSubtestChanged()
    End Sub
    Partial Private Sub OnTestResultChanging(value As String)
    End Sub
    Partial Private Sub OnTestResultChanged()
    End Sub
    Partial Private Sub OnTestedByChanging(value As String)
    End Sub
    Partial Private Sub OnTestedByChanged()
    End Sub
    Partial Private Sub OnQCbyChanging(value As String)
    End Sub
    Partial Private Sub OnQCbyChanged()
    End Sub
    Partial Private Sub OnOfficerChanging(value As String)
    End Sub
    Partial Private Sub OnOfficerChanged()
    End Sub
    Partial Private Sub OnRec_DateChanging(value As String)
    End Sub
    Partial Private Sub OnRec_DateChanged()
    End Sub
    Partial Private Sub OnODValueChanging(value As System.Nullable(Of Double))
    End Sub
    Partial Private Sub OnODValueChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultRef", DbType:="Int NOT NULL")>  _
	Public Property ResultRef() As Integer
		Get
			Return Me._ResultRef
		End Get
		Set
			If ((Me._ResultRef = value)  _
						= false) Then
				Me.OnResultRefChanging(value)
				Me.SendPropertyChanging
				Me._ResultRef = value
				Me.SendPropertyChanged("ResultRef")
				Me.OnResultRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REC_ID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property REC_ID() As System.Guid
		Get
			Return Me._REC_ID
		End Get
		Set
			If ((Me._REC_ID = value)  _
						= false) Then
				Me.OnREC_IDChanging(value)
				Me.SendPropertyChanging
				Me._REC_ID = value
				Me.SendPropertyChanged("REC_ID")
				Me.OnREC_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="Int NOT NULL")>  _
	Public Property Barcode() As Integer
		Get
			Return Me._Barcode
		End Get
		Set
			If ((Me._Barcode = value)  _
						= false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UniqueID() As String
		Get
			Return Me._UniqueID
		End Get
		Set
			If (String.Equals(Me._UniqueID, value) = false) Then
				Me.OnUniqueIDChanging(value)
				Me.SendPropertyChanging
				Me._UniqueID = value
				Me.SendPropertyChanged("UniqueID")
				Me.OnUniqueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aliqots", DbType:="Int NOT NULL")>  _
	Public Property Aliqots() As Integer
		Get
			Return Me._Aliqots
		End Get
		Set
			If ((Me._Aliqots = value)  _
						= false) Then
				Me.OnAliqotsChanging(value)
				Me.SendPropertyChanging
				Me._Aliqots = value
				Me.SendPropertyChanged("Aliqots")
				Me.OnAliqotsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Test", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Test() As String
		Get
			Return Me._Test
		End Get
		Set
			If (String.Equals(Me._Test, value) = false) Then
				Me.OnTestChanging(value)
				Me.SendPropertyChanging
				Me._Test = value
				Me.SendPropertyChanged("Test")
				Me.OnTestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subtest", DbType:="NChar(100)")>  _
	Public Property Subtest() As String
		Get
			Return Me._Subtest
		End Get
		Set
			If (String.Equals(Me._Subtest, value) = false) Then
				Me.OnSubtestChanging(value)
				Me.SendPropertyChanging
				Me._Subtest = value
				Me.SendPropertyChanged("Subtest")
				Me.OnSubtestChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestResult", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestResult() As String
		Get
			Return Me._TestResult
		End Get
		Set
			If (String.Equals(Me._TestResult, value) = false) Then
				Me.OnTestResultChanging(value)
				Me.SendPropertyChanging
				Me._TestResult = value
				Me.SendPropertyChanged("TestResult")
				Me.OnTestResultChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestedBy", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property TestedBy() As String
		Get
			Return Me._TestedBy
		End Get
		Set
			If (String.Equals(Me._TestedBy, value) = false) Then
				Me.OnTestedByChanging(value)
				Me.SendPropertyChanging
				Me._TestedBy = value
				Me.SendPropertyChanged("TestedBy")
				Me.OnTestedByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCby", DbType:="NChar(30)")>  _
	Public Property QCby() As String
		Get
			Return Me._QCby
		End Get
		Set
			If (String.Equals(Me._QCby, value) = false) Then
				Me.OnQCbyChanging(value)
				Me.SendPropertyChanging
				Me._QCby = value
				Me.SendPropertyChanged("QCby")
				Me.OnQCbyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Officer", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Officer() As String
		Get
			Return Me._Officer
		End Get
		Set
			If (String.Equals(Me._Officer, value) = false) Then
				Me.OnOfficerChanging(value)
				Me.SendPropertyChanging
				Me._Officer = value
				Me.SendPropertyChanged("Officer")
				Me.OnOfficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rec_Date", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property Rec_Date() As String
		Get
			Return Me._Rec_Date
		End Get
		Set
			If (String.Equals(Me._Rec_Date, value) = false) Then
				Me.OnRec_DateChanging(value)
				Me.SendPropertyChanging
				Me._Rec_Date = value
				Me.SendPropertyChanged("Rec_Date")
				Me.OnRec_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ODValue", DbType:="Float")>  _
	Public Property ODValue() As System.Nullable(Of Double)
		Get
			Return Me._ODValue
		End Get
		Set
			If (Me._ODValue.Equals(value) = false) Then
				Me.OnODValueChanging(value)
				Me.SendPropertyChanging
				Me._ODValue = value
				Me.SendPropertyChanged("ODValue")
				Me.OnODValueChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Sample_logs")>  _
Partial Public Class Sample_log
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RecID As System.Guid
	
	Private _Barcode As Integer
	
	Private _UniqueID As String
	
	Private _Aliqots As Integer
	
	Private _BatchID As String
	
	Private _Location As String
	
	Private _Officer As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRecIDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRecIDChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnAliqotsChanging(value As Integer)
    End Sub
    Partial Private Sub OnAliqotsChanged()
    End Sub
    Partial Private Sub OnBatchIDChanging(value As String)
    End Sub
    Partial Private Sub OnBatchIDChanged()
    End Sub
    Partial Private Sub OnLocationChanging(value As String)
    End Sub
    Partial Private Sub OnLocationChanged()
    End Sub
    Partial Private Sub OnOfficerChanging(value As String)
    End Sub
    Partial Private Sub OnOfficerChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RecID() As System.Guid
		Get
			Return Me._RecID
		End Get
		Set
			If ((Me._RecID = value)  _
						= false) Then
				Me.OnRecIDChanging(value)
				Me.SendPropertyChanging
				Me._RecID = value
				Me.SendPropertyChanged("RecID")
				Me.OnRecIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Barcode() As Integer
		Get
			Return Me._Barcode
		End Get
		Set
			If ((Me._Barcode = value)  _
						= false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property UniqueID() As String
		Get
			Return Me._UniqueID
		End Get
		Set
			If (String.Equals(Me._UniqueID, value) = false) Then
				Me.OnUniqueIDChanging(value)
				Me.SendPropertyChanging
				Me._UniqueID = value
				Me.SendPropertyChanged("UniqueID")
				Me.OnUniqueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aliqots", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Aliqots() As Integer
		Get
			Return Me._Aliqots
		End Get
		Set
			If ((Me._Aliqots = value)  _
						= false) Then
				Me.OnAliqotsChanging(value)
				Me.SendPropertyChanging
				Me._Aliqots = value
				Me.SendPropertyChanged("Aliqots")
				Me.OnAliqotsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property BatchID() As String
		Get
			Return Me._BatchID
		End Get
		Set
			If (String.Equals(Me._BatchID, value) = false) Then
				Me.OnBatchIDChanging(value)
				Me.SendPropertyChanging
				Me._BatchID = value
				Me.SendPropertyChanged("BatchID")
				Me.OnBatchIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Location", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Location() As String
		Get
			Return Me._Location
		End Get
		Set
			If (String.Equals(Me._Location, value) = false) Then
				Me.OnLocationChanging(value)
				Me.SendPropertyChanging
				Me._Location = value
				Me.SendPropertyChanged("Location")
				Me.OnLocationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Officer", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Officer() As String
		Get
			Return Me._Officer
		End Get
		Set
			If (String.Equals(Me._Officer, value) = false) Then
				Me.OnOfficerChanging(value)
				Me.SendPropertyChanging
				Me._Officer = value
				Me.SendPropertyChanged("Officer")
				Me.OnOfficerChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Demographics")>  _
Partial Public Class Demographic
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Rec_ID As System.Guid
	
	Private _Name As String
	
	Private _MName As String
	
	Private _Lname As String
	
	Private _Age As Integer
	
	Private _Gender As String
	
	Private _Officer As String
	
	Private _LabRef As Integer
	
	Private _Barcode As Integer
	
	Private _Rec_Date As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRec_IDChanging(value As System.Guid)
    End Sub
    Partial Private Sub OnRec_IDChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnMNameChanging(value As String)
    End Sub
    Partial Private Sub OnMNameChanged()
    End Sub
    Partial Private Sub OnLnameChanging(value As String)
    End Sub
    Partial Private Sub OnLnameChanged()
    End Sub
    Partial Private Sub OnAgeChanging(value As Integer)
    End Sub
    Partial Private Sub OnAgeChanged()
    End Sub
    Partial Private Sub OnGenderChanging(value As String)
    End Sub
    Partial Private Sub OnGenderChanged()
    End Sub
    Partial Private Sub OnOfficerChanging(value As String)
    End Sub
    Partial Private Sub OnOfficerChanged()
    End Sub
    Partial Private Sub OnLabRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnLabRefChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As Integer)
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnRec_DateChanging(value As String)
    End Sub
    Partial Private Sub OnRec_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rec_ID", DbType:="UniqueIdentifier NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Rec_ID() As System.Guid
		Get
			Return Me._Rec_ID
		End Get
		Set
			If ((Me._Rec_ID = value)  _
						= false) Then
				Me.OnRec_IDChanging(value)
				Me.SendPropertyChanging
				Me._Rec_ID = value
				Me.SendPropertyChanged("Rec_ID")
				Me.OnRec_IDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MName", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property MName() As String
		Get
			Return Me._MName
		End Get
		Set
			If (String.Equals(Me._MName, value) = false) Then
				Me.OnMNameChanging(value)
				Me.SendPropertyChanging
				Me._MName = value
				Me.SendPropertyChanged("MName")
				Me.OnMNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lname", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Lname() As String
		Get
			Return Me._Lname
		End Get
		Set
			If (String.Equals(Me._Lname, value) = false) Then
				Me.OnLnameChanging(value)
				Me.SendPropertyChanging
				Me._Lname = value
				Me.SendPropertyChanged("Lname")
				Me.OnLnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Age", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Age() As Integer
		Get
			Return Me._Age
		End Get
		Set
			If ((Me._Age = value)  _
						= false) Then
				Me.OnAgeChanging(value)
				Me.SendPropertyChanging
				Me._Age = value
				Me.SendPropertyChanged("Age")
				Me.OnAgeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Gender", DbType:="NVarChar(1) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Gender() As String
		Get
			Return Me._Gender
		End Get
		Set
			If (String.Equals(Me._Gender, value) = false) Then
				Me.OnGenderChanging(value)
				Me.SendPropertyChanging
				Me._Gender = value
				Me.SendPropertyChanged("Gender")
				Me.OnGenderChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Officer", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Officer() As String
		Get
			Return Me._Officer
		End Get
		Set
			If (String.Equals(Me._Officer, value) = false) Then
				Me.OnOfficerChanging(value)
				Me.SendPropertyChanging
				Me._Officer = value
				Me.SendPropertyChanged("Officer")
				Me.OnOfficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LabRef", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LabRef() As Integer
		Get
			Return Me._LabRef
		End Get
		Set
			If ((Me._LabRef = value)  _
						= false) Then
				Me.OnLabRefChanging(value)
				Me.SendPropertyChanging
				Me._LabRef = value
				Me.SendPropertyChanged("LabRef")
				Me.OnLabRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property Barcode() As Integer
		Get
			Return Me._Barcode
		End Get
		Set
			If ((Me._Barcode = value)  _
						= false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rec_Date", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Rec_Date() As String
		Get
			Return Me._Rec_Date
		End Get
		Set
			If (String.Equals(Me._Rec_Date, value) = false) Then
				Me.OnRec_DateChanging(value)
				Me.SendPropertyChanging
				Me._Rec_Date = value
				Me.SendPropertyChanged("Rec_Date")
				Me.OnRec_DateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Archivings")>  _
Partial Public Class Archiving1
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _LabRef As Integer
	
	Private _Barcode As System.Nullable(Of Integer)
	
	Private _UniqueID As String
	
	Private _BOXID As Integer
	
	Private _Pos_Ref As String
	
	Private _ArchiveState As String
	
	Private _ArchiveDate As String
	
	Private _Officer As String
	
	Private _Rec_Date As String
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnLabRefChanging(value As Integer)
    End Sub
    Partial Private Sub OnLabRefChanged()
    End Sub
    Partial Private Sub OnBarcodeChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnBarcodeChanged()
    End Sub
    Partial Private Sub OnUniqueIDChanging(value As String)
    End Sub
    Partial Private Sub OnUniqueIDChanged()
    End Sub
    Partial Private Sub OnBOXIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnBOXIDChanged()
    End Sub
    Partial Private Sub OnPos_RefChanging(value As String)
    End Sub
    Partial Private Sub OnPos_RefChanged()
    End Sub
    Partial Private Sub OnArchiveStateChanging(value As String)
    End Sub
    Partial Private Sub OnArchiveStateChanged()
    End Sub
    Partial Private Sub OnArchiveDateChanging(value As String)
    End Sub
    Partial Private Sub OnArchiveDateChanged()
    End Sub
    Partial Private Sub OnOfficerChanging(value As String)
    End Sub
    Partial Private Sub OnOfficerChanged()
    End Sub
    Partial Private Sub OnRec_DateChanging(value As String)
    End Sub
    Partial Private Sub OnRec_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_LabRef", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property LabRef() As Integer
		Get
			Return Me._LabRef
		End Get
		Set
			If ((Me._LabRef = value)  _
						= false) Then
				Me.OnLabRefChanging(value)
				Me.SendPropertyChanging
				Me._LabRef = value
				Me.SendPropertyChanged("LabRef")
				Me.OnLabRefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="Int")>  _
	Public Property Barcode() As System.Nullable(Of Integer)
		Get
			Return Me._Barcode
		End Get
		Set
			If (Me._Barcode.Equals(value) = false) Then
				Me.OnBarcodeChanging(value)
				Me.SendPropertyChanging
				Me._Barcode = value
				Me.SendPropertyChanged("Barcode")
				Me.OnBarcodeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false)>  _
	Public Property UniqueID() As String
		Get
			Return Me._UniqueID
		End Get
		Set
			If (String.Equals(Me._UniqueID, value) = false) Then
				Me.OnUniqueIDChanging(value)
				Me.SendPropertyChanging
				Me._UniqueID = value
				Me.SendPropertyChanged("UniqueID")
				Me.OnUniqueIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BOXID", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BOXID() As Integer
		Get
			Return Me._BOXID
		End Get
		Set
			If ((Me._BOXID = value)  _
						= false) Then
				Me.OnBOXIDChanging(value)
				Me.SendPropertyChanging
				Me._BOXID = value
				Me.SendPropertyChanged("BOXID")
				Me.OnBOXIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Pos_Ref", DbType:="NVarChar(10) NOT NULL", CanBeNull:=false, IsPrimaryKey:=true)>  _
	Public Property Pos_Ref() As String
		Get
			Return Me._Pos_Ref
		End Get
		Set
			If (String.Equals(Me._Pos_Ref, value) = false) Then
				Me.OnPos_RefChanging(value)
				Me.SendPropertyChanging
				Me._Pos_Ref = value
				Me.SendPropertyChanged("Pos_Ref")
				Me.OnPos_RefChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArchiveState", DbType:="NVarChar(10)")>  _
	Public Property ArchiveState() As String
		Get
			Return Me._ArchiveState
		End Get
		Set
			If (String.Equals(Me._ArchiveState, value) = false) Then
				Me.OnArchiveStateChanging(value)
				Me.SendPropertyChanging
				Me._ArchiveState = value
				Me.SendPropertyChanged("ArchiveState")
				Me.OnArchiveStateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ArchiveDate", DbType:="NVarChar(10)")>  _
	Public Property ArchiveDate() As String
		Get
			Return Me._ArchiveDate
		End Get
		Set
			If (String.Equals(Me._ArchiveDate, value) = false) Then
				Me.OnArchiveDateChanging(value)
				Me.SendPropertyChanging
				Me._ArchiveDate = value
				Me.SendPropertyChanged("ArchiveDate")
				Me.OnArchiveDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Officer", DbType:="NVarChar(10)")>  _
	Public Property Officer() As String
		Get
			Return Me._Officer
		End Get
		Set
			If (String.Equals(Me._Officer, value) = false) Then
				Me.OnOfficerChanging(value)
				Me.SendPropertyChanging
				Me._Officer = value
				Me.SendPropertyChanged("Officer")
				Me.OnOfficerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rec_Date", DbType:="NVarChar(10)")>  _
	Public Property Rec_Date() As String
		Get
			Return Me._Rec_Date
		End Get
		Set
			If (String.Equals(Me._Rec_Date, value) = false) Then
				Me.OnRec_DateChanging(value)
				Me.SendPropertyChanging
				Me._Rec_Date = value
				Me.SendPropertyChanged("Rec_Date")
				Me.OnRec_DateChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

Partial Public Class GetUsersResult
	
	Private _userID As Integer
	
	Private _groupID As Integer
	
	Private _fname As String
	
	Private _onames As String
	
	Private _code As String
	
	Private _username As String
	
	Private _password As String
	
	Private _logged As Integer
	
	Private _email As String
	
	Private _date As Date
	
	Private _status As String
	
	Private _officer As String
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_userID", DbType:="Int NOT NULL")>  _
	Public Property userID() As Integer
		Get
			Return Me._userID
		End Get
		Set
			If ((Me._userID = value)  _
						= false) Then
				Me._userID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_groupID", DbType:="Int NOT NULL")>  _
	Public Property groupID() As Integer
		Get
			Return Me._groupID
		End Get
		Set
			If ((Me._groupID = value)  _
						= false) Then
				Me._groupID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_fname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property fname() As String
		Get
			Return Me._fname
		End Get
		Set
			If (String.Equals(Me._fname, value) = false) Then
				Me._fname = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_onames", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property onames() As String
		Get
			Return Me._onames
		End Get
		Set
			If (String.Equals(Me._onames, value) = false) Then
				Me._onames = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_code", DbType:="VarChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property code() As String
		Get
			Return Me._code
		End Get
		Set
			If (String.Equals(Me._code, value) = false) Then
				Me._code = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_username", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property username() As String
		Get
			Return Me._username
		End Get
		Set
			If (String.Equals(Me._username, value) = false) Then
				Me._username = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property password() As String
		Get
			Return Me._password
		End Get
		Set
			If (String.Equals(Me._password, value) = false) Then
				Me._password = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_logged", DbType:="Int NOT NULL")>  _
	Public Property logged() As Integer
		Get
			Return Me._logged
		End Get
		Set
			If ((Me._logged = value)  _
						= false) Then
				Me._logged = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_email", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property email() As String
		Get
			Return Me._email
		End Get
		Set
			If (String.Equals(Me._email, value) = false) Then
				Me._email = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Name:="date", Storage:="_date", DbType:="DateTime NOT NULL")>  _
	Public Property [date]() As Date
		Get
			Return Me._date
		End Get
		Set
			If ((Me._date = value)  _
						= false) Then
				Me._date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_status", DbType:="VarChar(3) NOT NULL", CanBeNull:=false)>  _
	Public Property status() As String
		Get
			Return Me._status
		End Get
		Set
			If (String.Equals(Me._status, value) = false) Then
				Me._status = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_officer", DbType:="VarChar(15) NOT NULL", CanBeNull:=false)>  _
	Public Property officer() As String
		Get
			Return Me._officer
		End Get
		Set
			If (String.Equals(Me._officer, value) = false) Then
				Me._officer = value
			End If
		End Set
	End Property
End Class

Partial Public Class Proc_select_ResultsResult
	
	Private _ResultRef As Integer
	
	Private _REC_ID As System.Guid
	
	Private _Barcode As String
	
	Private _UniqueID As String
	
	Private _Aliqots As Integer
	
	Private _Test As String
	
	Private _Subtest As String
	
	Private _TestResult As String
	
	Private _TestedBy As String
	
	Private _QCby As String
	
	Private _QCdate As System.Nullable(Of Date)
	
	Private _Officer As String
	
	Private _Rec_Date As Date
	
	Private _Measure As System.Nullable(Of Double)
	
	Public Sub New()
		MyBase.New
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ResultRef", DbType:="Int NOT NULL")>  _
	Public Property ResultRef() As Integer
		Get
			Return Me._ResultRef
		End Get
		Set
			If ((Me._ResultRef = value)  _
						= false) Then
				Me._ResultRef = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_REC_ID", DbType:="UniqueIdentifier NOT NULL")>  _
	Public Property REC_ID() As System.Guid
		Get
			Return Me._REC_ID
		End Get
		Set
			If ((Me._REC_ID = value)  _
						= false) Then
				Me._REC_ID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Barcode", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Barcode() As String
		Get
			Return Me._Barcode
		End Get
		Set
			If (String.Equals(Me._Barcode, value) = false) Then
				Me._Barcode = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_UniqueID", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property UniqueID() As String
		Get
			Return Me._UniqueID
		End Get
		Set
			If (String.Equals(Me._UniqueID, value) = false) Then
				Me._UniqueID = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Aliqots", DbType:="Int NOT NULL")>  _
	Public Property Aliqots() As Integer
		Get
			Return Me._Aliqots
		End Get
		Set
			If ((Me._Aliqots = value)  _
						= false) Then
				Me._Aliqots = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Test", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Test() As String
		Get
			Return Me._Test
		End Get
		Set
			If (String.Equals(Me._Test, value) = false) Then
				Me._Test = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Subtest", DbType:="NChar(100)")>  _
	Public Property Subtest() As String
		Get
			Return Me._Subtest
		End Get
		Set
			If (String.Equals(Me._Subtest, value) = false) Then
				Me._Subtest = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestResult", DbType:="NVarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property TestResult() As String
		Get
			Return Me._TestResult
		End Get
		Set
			If (String.Equals(Me._TestResult, value) = false) Then
				Me._TestResult = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TestedBy", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property TestedBy() As String
		Get
			Return Me._TestedBy
		End Get
		Set
			If (String.Equals(Me._TestedBy, value) = false) Then
				Me._TestedBy = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCby", DbType:="NChar(30)")>  _
	Public Property QCby() As String
		Get
			Return Me._QCby
		End Get
		Set
			If (String.Equals(Me._QCby, value) = false) Then
				Me._QCby = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_QCdate", DbType:="Date")>  _
	Public Property QCdate() As System.Nullable(Of Date)
		Get
			Return Me._QCdate
		End Get
		Set
			If (Me._QCdate.Equals(value) = false) Then
				Me._QCdate = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Officer", DbType:="NVarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Officer() As String
		Get
			Return Me._Officer
		End Get
		Set
			If (String.Equals(Me._Officer, value) = false) Then
				Me._Officer = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rec_Date", DbType:="Date NOT NULL")>  _
	Public Property Rec_Date() As Date
		Get
			Return Me._Rec_Date
		End Get
		Set
			If ((Me._Rec_Date = value)  _
						= false) Then
				Me._Rec_Date = value
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Measure", DbType:="Float")>  _
	Public Property Measure() As System.Nullable(Of Double)
		Get
			Return Me._Measure
		End Get
		Set
			If (Me._Measure.Equals(value) = false) Then
				Me._Measure = value
			End If
		End Set
	End Property
End Class
